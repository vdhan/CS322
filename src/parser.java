//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Oct 29 09:53:01 ICT 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.Scanner;

/** CUP v0.10k generated parser.
  * @version Mon Oct 29 09:53:01 ICT 2012
  */
public class parser extends lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\002\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\004\000\002\006\002\000" +
    "\002\007\005\000\002\007\010\000\002\007\011\000\002" +
    "\007\006\000\002\027\004\000\002\027\003\000\002\010" +
    "\006\000\002\010\007\000\002\011\006\000\002\011\007" +
    "\000\002\012\004\000\002\012\005\000\002\013\003\000" +
    "\002\013\005\000\002\014\004\000\002\014\005\000\002" +
    "\024\003\000\002\024\003\000\002\015\006\000\002\016" +
    "\004\000\002\016\002\000\002\017\012\000\002\017\017" +
    "\000\002\017\012\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\017\016\000\002\017\004\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\030\003\000\002\030\002" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\004\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\004\000\002\020\003\000" +
    "\002\020\004\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\005\000\002\022\006\000\002\023\003\000\002\023\005" +
    "\000\002\025\003\000\002\025\006\000\002\025\004\000" +
    "\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\010\002\ufffe\004\ufffe\005\ufffe\001\002\000" +
    "\010\002\000\004\015\005\014\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\010\002\uffff\004" +
    "\uffff\005\uffff\001\002\000\010\002\ufffb\004\ufffb\005\ufffb" +
    "\001\002\000\006\013\016\031\020\001\002\000\010\002" +
    "\ufffd\004\ufffd\005\ufffd\001\002\000\010\002\ufffc\004\ufffc" +
    "\005\ufffc\001\002\000\006\013\uffe8\031\uffe8\001\002\000" +
    "\006\013\uffe7\031\uffe7\001\002\000\062\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7" +
    "\040\uffb7\041\uffb7\042\uffb7\043\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\001\002\000\006\013\016\031\037" +
    "\001\002\000\006\013\ufff3\031\ufff3\001\002\000\010\020" +
    "\022\022\025\026\023\001\002\000\004\014\235\001\002" +
    "\000\026\002\ufff8\004\ufff8\005\ufff8\006\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\017\ufff8\031\ufff8\001\002\000\006" +
    "\016\042\026\041\001\002\000\010\004\015\005\014\023" +
    "\026\001\002\000\006\016\uffee\026\uffee\001\002\000\006" +
    "\013\016\031\020\001\002\000\004\023\034\001\002\000" +
    "\006\023\uffec\024\032\001\002\000\006\004\015\005\014" +
    "\001\002\000\004\023\uffeb\001\002\000\006\016\uffed\026" +
    "\uffed\001\002\000\006\013\016\031\037\001\002\000\006" +
    "\023\uffea\024\uffea\001\002\000\006\013\ufff4\031\ufff4\001" +
    "\002\000\006\023\uffe9\024\uffe9\001\002\000\010\002\ufff0" +
    "\004\ufff0\005\ufff0\001\002\000\024\004\ufff9\005\ufff9\006" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\017\ufff9\031\ufff9" +
    "\001\002\000\010\002\ufff2\004\ufff2\005\ufff2\001\002\000" +
    "\024\004\015\005\014\006\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\017\uffe4\031\uffe4\001\002\000\006\013\016\031" +
    "\020\001\002\000\024\004\ufffa\005\ufffa\006\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\017\ufffa\031\ufffa\001\002\000" +
    "\020\006\055\010\050\011\052\012\061\013\016\017\056" +
    "\031\060\001\002\000\004\022\216\001\002\000\062\020" +
    "\uffba\021\uffba\022\207\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\032\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\045\uffba" +
    "\046\uffba\047\uffba\050\uffba\051\uffba\001\002\000\004\022" +
    "\172\001\002\000\020\006\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\017\uffe5\031\uffe5\001\002\000\016\020\134\025" +
    "\164\045\160\046\161\047\162\050\163\001\002\000\004" +
    "\022\144\001\002\000\010\002\uffe6\004\uffe6\005\uffe6\001" +
    "\002\000\004\026\143\001\002\000\022\013\016\014\076" +
    "\015\071\022\075\030\064\031\060\033\074\044\067\001" +
    "\002\000\024\013\016\014\076\015\071\022\075\026\072" +
    "\030\064\031\060\033\074\044\067\001\002\000\004\026" +
    "\063\001\002\000\020\006\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\017\uffdc\031\uffdc\001\002\000\022\013\016\014" +
    "\076\015\071\022\075\030\064\031\060\033\074\044\067" +
    "\001\002\000\060\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002" +
    "\000\036\026\140\027\110\030\100\031\113\032\102\034" +
    "\101\035\115\036\114\037\103\040\111\041\107\042\105" +
    "\043\106\051\104\001\002\000\022\013\016\014\076\015" +
    "\071\022\075\030\064\031\060\033\074\044\067\001\002" +
    "\000\060\020\134\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\001\002\000\060" +
    "\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\001\002\000\020\006\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\uffdf\017\uffdf\031\uffdf\001" +
    "\002\000\060\020\uffbf\021\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\001\002\000" +
    "\022\013\016\014\076\015\071\022\075\030\064\031\060" +
    "\033\074\044\067\001\002\000\022\013\016\014\076\015" +
    "\071\022\075\030\064\031\060\033\074\044\067\001\002" +
    "\000\060\020\uffc2\021\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002\000\036" +
    "\023\112\027\110\030\100\031\113\032\102\034\101\035" +
    "\115\036\114\037\103\040\111\041\107\042\105\043\106" +
    "\051\104\001\002\000\022\013\016\014\076\015\071\022" +
    "\075\030\064\031\060\033\074\044\067\001\002\000\022" +
    "\013\016\014\076\015\071\022\075\030\064\031\060\033" +
    "\074\044\067\001\002\000\022\013\016\014\076\015\071" +
    "\022\075\030\064\031\060\033\074\044\067\001\002\000" +
    "\022\013\016\014\076\015\071\022\075\030\064\031\060" +
    "\033\074\044\067\001\002\000\022\013\016\014\076\015" +
    "\071\022\075\030\064\031\060\033\074\044\067\001\002" +
    "\000\022\013\016\014\076\015\071\022\075\030\064\031" +
    "\060\033\074\044\067\001\002\000\022\013\016\014\076" +
    "\015\071\022\075\030\064\031\060\033\074\044\067\001" +
    "\002\000\022\013\016\014\076\015\071\022\075\030\064" +
    "\031\060\033\074\044\067\001\002\000\022\013\016\014" +
    "\076\015\071\022\075\030\064\031\060\033\074\044\067" +
    "\001\002\000\022\013\016\014\076\015\071\022\075\030" +
    "\064\031\060\033\074\044\067\001\002\000\060\020\uffc0" +
    "\021\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\001\002\000\022\013\016\014\076" +
    "\015\071\022\075\030\064\031\060\033\074\044\067\001" +
    "\002\000\022\013\016\014\076\015\071\022\075\030\064" +
    "\031\060\033\074\044\067\001\002\000\022\013\016\014" +
    "\076\015\071\022\075\030\064\031\060\033\074\044\067" +
    "\001\002\000\060\020\uffcd\021\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\110\030\100\031\113\032\102\034\101" +
    "\035\uffcd\036\114\037\103\040\111\041\107\042\105\043" +
    "\106\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\104\001\002" +
    "\000\054\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\110\030\100\031\113\032\102\034\uffcc\035\uffcc" +
    "\040\111\041\107\042\105\043\106\045\uffcc\046\uffcc\047" +
    "\uffcc\050\uffcc\051\104\001\002\000\060\020\uffd2\021\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\045\uffd2\046\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\001\002\000\050\020\uffca\021\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\110\030\100\031\113\032" +
    "\102\034\uffca\035\uffca\036\uffca\037\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\104\001\002\000\060\020\uffd4\021" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\113\032\102\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\045\uffd4\046\uffd4\047\uffd4" +
    "\050\uffd4\051\104\001\002\000\050\020\uffc9\021\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\110\030\100\031\113" +
    "\032\102\034\uffc9\035\uffc9\036\uffc9\037\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\104\001\002\000\050\020\uffc7" +
    "\021\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\110\030" +
    "\100\031\113\032\102\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\104\001\002\000" +
    "\050\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\110\030\100\031\113\032\102\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\104" +
    "\001\002\000\060\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002" +
    "\000\054\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\110\030\100\031\113\032\102\034\uffcb\035\uffcb" +
    "\040\111\041\107\042\105\043\106\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\104\001\002\000\060\020\uffd1\021\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\001\002\000\060\020\uffce\021\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\110\030\100\031\113\032" +
    "\102\034\uffce\035\uffce\036\114\037\103\040\111\041\107" +
    "\042\105\043\106\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\104\001\002\000\060\020\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\113\032\102\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\104\001" +
    "\002\000\060\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000" +
    "\022\013\016\014\076\015\071\022\075\030\064\031\060" +
    "\033\074\044\067\001\002\000\036\021\136\027\110\030" +
    "\100\031\113\032\102\034\101\035\115\036\114\037\103" +
    "\040\111\041\107\042\105\043\106\051\104\001\002\000" +
    "\060\020\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\001\002\000\060\020" +
    "\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\001\002\000\020\006\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\017\uffe0\031\uffe0\001\002" +
    "\000\060\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\113\032\102\034\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\104\001\002\000\060" +
    "\020\uffb8\021\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8\046" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\001\002\000\020\006\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\017\uffde\031\uffde\001" +
    "\002\000\022\013\016\014\076\015\071\022\075\030\064" +
    "\031\060\033\074\044\067\001\002\000\036\023\146\027" +
    "\110\030\100\031\113\032\102\034\101\035\115\036\114" +
    "\037\103\040\111\041\107\042\105\043\106\051\104\001" +
    "\002\000\004\016\147\001\002\000\024\004\ufff9\005\ufff9" +
    "\006\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\017\ufff9\031" +
    "\ufff9\001\002\000\024\004\015\005\014\006\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\017\uffe4\031\uffe4\001\002\000" +
    "\020\006\055\010\050\011\052\012\061\013\016\017\152" +
    "\031\060\001\002\000\022\006\uffe3\007\153\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\017\uffe3\031\uffe3\001\002\000\004" +
    "\016\154\001\002\000\024\004\ufff9\005\ufff9\006\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\017\ufff9\031\ufff9\001\002" +
    "\000\024\004\015\005\014\006\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\017\uffe4\031\uffe4\001\002\000\020\006\055" +
    "\010\050\011\052\012\061\013\016\017\157\031\060\001" +
    "\002\000\020\006\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\017\uffe2\031\uffe2\001\002\000\022\013\016\014\076\015" +
    "\071\022\075\030\064\031\060\033\074\044\067\001\002" +
    "\000\022\013\016\014\076\015\071\022\075\030\064\031" +
    "\060\033\074\044\067\001\002\000\022\013\016\014\076" +
    "\015\071\022\075\030\064\031\060\033\074\044\067\001" +
    "\002\000\022\013\016\014\076\015\071\022\075\030\064" +
    "\031\060\033\074\044\067\001\002\000\022\013\016\014" +
    "\076\015\071\022\075\030\064\031\060\033\074\044\067" +
    "\001\002\000\040\023\uffdb\026\uffdb\027\110\030\100\031" +
    "\113\032\102\034\101\035\115\036\114\037\103\040\111" +
    "\041\107\042\105\043\106\051\104\001\002\000\040\023" +
    "\uffd7\026\uffd7\027\110\030\100\031\113\032\102\034\101" +
    "\035\115\036\114\037\103\040\111\041\107\042\105\043" +
    "\106\051\104\001\002\000\040\023\uffd8\026\uffd8\027\110" +
    "\030\100\031\113\032\102\034\101\035\115\036\114\037" +
    "\103\040\111\041\107\042\105\043\106\051\104\001\002" +
    "\000\040\023\uffd9\026\uffd9\027\110\030\100\031\113\032" +
    "\102\034\101\035\115\036\114\037\103\040\111\041\107" +
    "\042\105\043\106\051\104\001\002\000\040\023\uffda\026" +
    "\uffda\027\110\030\100\031\113\032\102\034\101\035\115" +
    "\036\114\037\103\040\111\041\107\042\105\043\106\051" +
    "\104\001\002\000\010\013\016\026\uffd5\031\060\001\002" +
    "\000\006\023\uffd6\026\uffd6\001\002\000\004\026\176\001" +
    "\002\000\016\020\uffba\025\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\001\002\000\022\013\016\014\076\015\071\022" +
    "\075\030\064\031\060\033\074\044\067\001\002\000\036" +
    "\026\200\027\110\030\100\031\113\032\102\034\101\035" +
    "\115\036\114\037\103\040\111\041\107\042\105\043\106" +
    "\051\104\001\002\000\010\013\016\023\uffd5\031\060\001" +
    "\002\000\004\023\202\001\002\000\004\016\203\001\002" +
    "\000\024\004\ufff9\005\ufff9\006\ufff9\010\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\017\ufff9\031\ufff9\001\002\000\024\004\015" +
    "\005\014\006\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\017" +
    "\uffe4\031\uffe4\001\002\000\020\006\055\010\050\011\052" +
    "\012\061\013\016\017\206\031\060\001\002\000\020\006" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\017\uffdd\031\uffdd" +
    "\001\002\000\024\013\016\014\076\015\071\022\075\023" +
    "\212\030\064\031\060\033\074\044\067\001\002\000\040" +
    "\023\uffbc\024\uffbc\027\110\030\100\031\113\032\102\034" +
    "\101\035\115\036\114\037\103\040\111\041\107\042\105" +
    "\043\106\051\104\001\002\000\006\023\214\024\213\001" +
    "\002\000\060\020\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\001\002\000" +
    "\022\013\016\014\076\015\071\022\075\030\064\031\060" +
    "\033\074\044\067\001\002\000\060\020\uffbd\021\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\001\002\000\040\023\uffbb\024\uffbb\027\110\030" +
    "\100\031\113\032\102\034\101\035\115\036\114\037\103" +
    "\040\111\041\107\042\105\043\106\051\104\001\002\000" +
    "\022\013\016\014\076\015\071\022\075\030\064\031\060" +
    "\033\074\044\067\001\002\000\036\023\220\027\110\030" +
    "\100\031\113\032\102\034\101\035\115\036\114\037\103" +
    "\040\111\041\107\042\105\043\106\051\104\001\002\000" +
    "\004\016\221\001\002\000\024\004\ufff9\005\ufff9\006\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\013\ufff9\017\ufff9\031\ufff9\001" +
    "\002\000\024\004\015\005\014\006\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\017\uffe4\031\uffe4\001\002\000\020\006" +
    "\055\010\050\011\052\012\061\013\016\017\224\031\060" +
    "\001\002\000\020\006\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\017\uffe1\031\uffe1\001\002\000\006\013\016\031\037" +
    "\001\002\000\006\020\022\026\023\001\002\000\006\020" +
    "\230\026\231\001\002\000\004\014\232\001\002\000\026" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\010\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\017\ufff5\031\ufff5\001\002\000\004\021\233" +
    "\001\002\000\004\026\234\001\002\000\026\002\ufff6\004" +
    "\ufff6\005\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\017\ufff6\031\ufff6\001\002\000\004\021\236\001\002\000" +
    "\004\026\237\001\002\000\026\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\017\ufff7\031" +
    "\ufff7\001\002\000\010\020\230\022\025\026\231\001\002" +
    "\000\006\016\042\026\242\001\002\000\010\002\uffef\004" +
    "\uffef\005\uffef\001\002\000\010\002\ufff1\004\ufff1\005\ufff1" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\003\004\004\003\001\001\000\014\005" +
    "\006\007\011\010\012\011\007\024\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\020\027\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\237\001\001\000\002\001\001" +
    "\000\004\012\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\042\001\001\000\010\013\027\014\030" +
    "\024\026\001\001\000\002\001\001\000\006\026\035\027" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\032\014\030\024\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\043\001\001\000\002\001\001\000\010\007\045" +
    "\016\046\024\044\001\001\000\006\026\225\027\224\001" +
    "\001\000\002\001\001\000\014\017\052\022\056\025\053" +
    "\026\050\031\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\020\141\021\064\022\072\025\067\026\050\001\001" +
    "\000\014\020\065\021\064\022\072\025\067\026\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\140" +
    "\021\064\022\072\025\067\026\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\020\136\021\064\022\072" +
    "\025\067\026\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\132" +
    "\021\064\022\072\025\067\026\050\001\001\000\014\020" +
    "\076\021\064\022\072\025\067\026\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\131\021\064\022" +
    "\072\025\067\026\050\001\001\000\014\020\130\021\064" +
    "\022\072\025\067\026\050\001\001\000\014\020\127\021" +
    "\064\022\072\025\067\026\050\001\001\000\014\020\126" +
    "\021\064\022\072\025\067\026\050\001\001\000\014\020" +
    "\125\021\064\022\072\025\067\026\050\001\001\000\014" +
    "\020\124\021\064\022\072\025\067\026\050\001\001\000" +
    "\014\020\123\021\064\022\072\025\067\026\050\001\001" +
    "\000\014\020\122\021\064\022\072\025\067\026\050\001" +
    "\001\000\014\020\121\021\064\022\072\025\067\026\050" +
    "\001\001\000\014\020\120\021\064\022\072\025\067\026" +
    "\050\001\001\000\002\001\001\000\014\020\117\021\064" +
    "\022\072\025\067\026\050\001\001\000\014\020\116\021" +
    "\064\022\072\025\067\026\050\001\001\000\014\020\115" +
    "\021\064\022\072\025\067\026\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\020\134\021\064\022\072\025\067\026\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\144\021\064\022\072\025" +
    "\067\026\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\147\001\001\000\010\007\045\016\150\024" +
    "\044\001\001\000\014\017\052\022\056\025\053\026\050" +
    "\031\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\154\001\001\000\010\007\045\016\155\024\044" +
    "\001\001\000\014\017\052\022\056\025\053\026\050\031" +
    "\061\001\001\000\002\001\001\000\014\020\170\021\064" +
    "\022\072\025\067\026\050\001\001\000\014\020\167\021" +
    "\064\022\072\025\067\026\050\001\001\000\014\020\166" +
    "\021\064\022\072\025\067\026\050\001\001\000\014\020" +
    "\165\021\064\022\072\025\067\026\050\001\001\000\014" +
    "\020\164\021\064\022\072\025\067\026\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\025\053\026\174\030" +
    "\173\031\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\176\021\064\022\072\025" +
    "\067\026\050\001\001\000\002\001\001\000\012\025\053" +
    "\026\174\030\200\031\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\203\001\001\000\010\007\045" +
    "\016\204\024\044\001\001\000\014\017\052\022\056\025" +
    "\053\026\050\031\061\001\001\000\002\001\001\000\016" +
    "\020\207\021\064\022\072\023\210\025\067\026\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\020\214\021\064\022\072\025\067\026\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\020\216" +
    "\021\064\022\072\025\067\026\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\221\001\001\000\010" +
    "\007\045\016\222\024\044\001\001\000\014\017\052\022" +
    "\056\025\053\026\050\031\061\001\001\000\002\001\001" +
    "\000\004\026\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\240\001\001" +
    "\000\004\015\242\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
       Errors.fatal(0,0, "Syntax error at end of file");
    }
    else {
       Errors.fatal(((TokenVal)currToken.value).linenum,
	            ((TokenVal)currToken.value).charnum,
		    "Syntax error");
    }
    System.exit(-1);
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // id ::= ID 
            {
              Id RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StringTokenVal i = (StringTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Id(i.linenum, i.charnum, i.strVal); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // loc ::= TIMES exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DeRefExp(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*loc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // loc ::= loc LSQBRACKET exp RSQBRACKET 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayExp(l, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*loc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // loc ::= id 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*loc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // actualList ::= actualList COMMA exp 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.addLast(e); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*actualList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // actualList ::= exp 
            {
              LinkedList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LinkedList(); RESULT.addLast(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*actualList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // fncall ::= id LPAREN actualList RPAREN 
            {
              CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExp(i, new ActualList(l)); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*fncall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // fncall ::= id LPAREN RPAREN 
            {
              CallExp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExp(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*fncall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term ::= fncall 
            {
              Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CallExp f = (CallExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term ::= LPAREN exp RPAREN 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= STRINGLITERAL 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StringTokenVal s = (StringTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new StringLit(s.linenum, s.charnum, s.strVal); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= INTLITERAL 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IntLitTokenVal i = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IntLit(i.linenum, i.charnum, i.intVal); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= loc 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= ADDROF exp 
            {
              Exp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AddrOfExp(l); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= term 
            {
              Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= MINUS exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryMinusExp(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp GREATEREQ exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new GreaterEqExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp LESSEQ exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LessEqExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp GREATER exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new GreaterExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp LESS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LessExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp NOTEQUALS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NotEqualsExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp EQUALS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new EqualsExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp OR exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OrExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp AND exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AndExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NOT exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NotExp(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp PERCENT exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ModuloExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp DIVIDE exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DivideExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp TIMES exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TimesExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MINUS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new MinusExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp PLUS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PlusExp(e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // forStmt ::= 
            {
              Stmt RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*forStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // forStmt ::= assign 
            {
              Stmt RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*forStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assign ::= loc DIVEQL exp 
            {
              Stmt RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignStmt(l, new DivideExp(l, e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // assign ::= loc TIMESEQL exp 
            {
              Stmt RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignStmt(l, new TimesExp(l, e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assign ::= loc MINUSEQL exp 
            {
              Stmt RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignStmt(l, new MinusExp(l, e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign ::= loc PLUSEQL exp 
            {
              Stmt RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignStmt(l, new PlusExp(l, e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign ::= loc ASSIGN exp 
            {
              Stmt RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignStmt(l, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= assign SEMICOLON 
            {
              Stmt RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= FOR LPAREN forStmt SEMICOLON exp SEMICOLON forStmt RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              Stmt RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Stmt a = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Stmt b = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ForStmt(a, e, b, new DeclList(v), new StmtList(s)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= fncall SEMICOLON 
            {
              Stmt RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallExp f = (CallExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmt(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= RETURN SEMICOLON 
            {
              Stmt RESULT = null;
		 RESULT = new ReturnStmt(null); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= RETURN exp SEMICOLON 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmt(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmt(e, new DeclList(v), new StmtList(s)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList v1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList s1 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s2 = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseStmt(e, new DeclList(v1), new StmtList(s1),
                                             new DeclList(v2), new StmtList(s2)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              Stmt RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmt(e, new DeclList(v), new StmtList(s)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmtList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtList ::= stmtList stmt 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.addLast(s); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              FnBody RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList v = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FnBody(new DeclList(v), new StmtList(s)); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*fnBody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= INT 
            {
              String RESULT = null;
		 RESULT = Type.intTypeName; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= VOID 
            {
              String RESULT = null;
		 RESULT = Type.voidTypeName; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formalDecl ::= type pointers id 
            {
              FormalDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FormalDecl(Type.CreatePointerType(t, p.intValue()), i); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*formalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formalDecl ::= type id 
            {
              FormalDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FormalDecl(Type.CreateSimpleType(t), i); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*formalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalsList ::= formalDecl COMMA formalsList 
            {
              LinkedList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalDecl f = (FormalDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.addFirst(f); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*formalsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalsList ::= formalDecl 
            {
              LinkedList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormalDecl f = (FormalDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LinkedList(); RESULT.addLast(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*formalsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formals ::= LPAREN formalsList RPAREN 
            {
              FormalsList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FormalsList(l); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*formals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= LPAREN RPAREN 
            {
              FormalsList RESULT = null;
		 RESULT = new FormalsList(new LinkedList()); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*formals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fnPreDecl ::= type pointers id formals SEMICOLON 
            {
              FnPreDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsList f = (FormalsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FnPreDecl(Type.CreatePointerType(t, p.intValue()), i, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*fnPreDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fnPreDecl ::= type id formals SEMICOLON 
            {
              FnPreDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsList f = (FormalsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FnPreDecl(Type.CreateSimpleType(t), i, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*fnPreDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fnDecl ::= type pointers id formals fnBody 
            {
              FnDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsList f = (FormalsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FnBody body = (FnBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FnDecl(Type.CreatePointerType(t, p.intValue()), i, f, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fnDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fnDecl ::= type id formals fnBody 
            {
              FnDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsList f = (FormalsList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FnBody body = (FnBody)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FnDecl(Type.CreateSimpleType(t), i, f, body); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fnDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pointers ::= TIMES 
            {
              Integer RESULT = null;
		 RESULT = new Integer(1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*pointers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pointers ::= pointers TIMES 
            {
              Integer RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Integer(p.intValue() + 1); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*pointers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDecl ::= type pointers id SEMICOLON 
            {
              VarDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(Type.CreatePointerType(t, p.intValue()), i); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDecl ::= type pointers id LSQBRACKET INTLITERAL RSQBRACKET SEMICOLON 
            {
              VarDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IntLitTokenVal lit = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VarDecl(Type.CreateArrayPointerType(t, lit.intVal, p.intValue()), i); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDecl ::= type id LSQBRACKET INTLITERAL RSQBRACKET SEMICOLON 
            {
              VarDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IntLitTokenVal lit = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new VarDecl(Type.CreateArrayType(t, lit.intVal), i); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDecl ::= type id SEMICOLON 
            {
              VarDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(Type.CreateSimpleType(t), i); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDeclList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		VarDecl var = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.addLast(var); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= fnPreDecl 
            {
              Decl RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FnPreDecl f = (FnPreDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= fnDecl 
            {
              Decl RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FnDecl f = (FnDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl 
            {
              Decl RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*declList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              LinkedList RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 dl.addLast(d); RESULT = dl; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*declList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              Program RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Program(new DeclList(d)); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

